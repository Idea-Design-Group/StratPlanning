// <auto-generated />
using System;
using Core.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Core.Migrations
{
    [DbContext(typeof(PlanningDbContext))]
    [Migration("20190418075846_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Entities.BooleanAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Answer");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedBy");

                    b.Property<bool?>("IsFinal")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("QuestionId");

                    b.Property<int?>("ResourceId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int?>("UpdatedBy");

                    b.Property<int>("UserToPlanId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ResourceId")
                        .IsUnique()
                        .HasFilter("[ResourceId] IS NOT NULL");

                    b.HasIndex("UserToPlanId");

                    b.ToTable("BooleanAnswers");
                });

            modelBuilder.Entity("Core.Entities.Dictionary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedBy");

                    b.Property<bool>("HasCriterion");

                    b.Property<bool>("HasPosition");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int?>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Dictionaries");
                });

            modelBuilder.Entity("Core.Entities.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("Ext")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int?>("QuestionId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Core.Entities.Introduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("PlanId");

                    b.Property<string>("Step")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int?>("UpdatedBy");

                    b.Property<int>("VideoId");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("VideoId")
                        .IsUnique();

                    b.ToTable("Introductions");
                });

            modelBuilder.Entity("Core.Entities.IssueOptionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Actors")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedBy");

                    b.Property<bool>("IsBestOption")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsFinal");

                    b.Property<int>("IssueId");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("QuestionId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int?>("UpdatedBy");

                    b.Property<int>("UserToPlanId");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserToPlanId");

                    b.ToTable("IssueOptionAnswers");
                });

            modelBuilder.Entity("Core.Entities.IssueOptionAnswerToResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IssueOptionAnswerId");

                    b.Property<int>("ResourceId");

                    b.HasKey("Id");

                    b.HasIndex("IssueOptionAnswerId");

                    b.HasIndex("ResourceId");

                    b.ToTable("IssueOptionAnswersToResources");
                });

            modelBuilder.Entity("Core.Entities.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<int>("QuestionId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("Core.Entities.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsWithActionPlan");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("StartDate");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int?>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("Core.Entities.PreparingAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime>("Date");

                    b.Property<string>("HowItWillBeDone")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsFinal")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("IssueOptionAnswerId");

                    b.Property<int>("QuestionId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int?>("UpdatedBy");

                    b.Property<int>("UserToPlanId");

                    b.HasKey("Id");

                    b.HasIndex("IssueOptionAnswerId")
                        .IsUnique();

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserToPlanId");

                    b.ToTable("PreparingAnswers");
                });

            modelBuilder.Entity("Core.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanSpecifyOther")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<bool>("HasFiles");

                    b.Property<bool>("HasOptions")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("Order");

                    b.Property<int>("StepBlockId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("StepBlockId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Core.Entities.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("Core.Entities.SelectAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AltOption")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedBy");

                    b.Property<bool?>("IsFinal")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("IssueId");

                    b.Property<int?>("OptionId");

                    b.Property<int>("QuestionId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int?>("UpdatedBy");

                    b.Property<int>("UserToPlanId");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.HasIndex("OptionId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserToPlanId");

                    b.ToTable("SelectAnswers");
                });

            modelBuilder.Entity("Core.Entities.StakeholderRatingAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedBy");

                    b.Property<int?>("Grade");

                    b.Property<bool?>("IsFinal")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("Priority");

                    b.Property<int>("QuestionId");

                    b.Property<int>("StakeholderId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int?>("UpdatedBy");

                    b.Property<int>("UserToPlanId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("StakeholderId");

                    b.HasIndex("UserToPlanId");

                    b.ToTable("StakeholderRatingAnswers");
                });

            modelBuilder.Entity("Core.Entities.StakeholderRatingAnswerToDictionary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CriterionId");

                    b.Property<int>("Rate");

                    b.Property<int>("StakeholderRatingAnswerId");

                    b.HasKey("Id");

                    b.HasIndex("CriterionId");

                    b.HasIndex("StakeholderRatingAnswerId");

                    b.ToTable("StakeholderRatingAnswersToDictionaries");
                });

            modelBuilder.Entity("Core.Entities.StepAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsFinal")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("QuestionId");

                    b.Property<int>("Remind");

                    b.Property<string>("Step")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int?>("UpdatedBy");

                    b.Property<int>("UserToPlanId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserToPlanId");

                    b.ToTable("StepAnswers");
                });

            modelBuilder.Entity("Core.Entities.StepBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Instruction")
                        .HasMaxLength(500);

                    b.Property<int>("Order");

                    b.Property<string>("Step")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int?>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("StepBlocks");
                });

            modelBuilder.Entity("Core.Entities.StrategicIssueAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("Goal")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool?>("IsFinal")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("IssueId");

                    b.Property<int>("QuestionId");

                    b.Property<int>("Ranking");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Solution")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int?>("UpdatedBy");

                    b.Property<int>("UserToPlanId");

                    b.Property<string>("Why")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserToPlanId");

                    b.ToTable("StrategicIssueAnswers");
                });

            modelBuilder.Entity("Core.Entities.TextAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedBy");

                    b.Property<bool?>("IsFinal")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsIssue")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsStakeholder")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("QuestionId");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int?>("UpdatedBy");

                    b.Property<int>("UserToPlanId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserToPlanId");

                    b.ToTable("TextAnswers");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("PositionId");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int?>("UpdatedBy");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Core.Entities.UserToIssueOptionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IssueOptionAnswerId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("IssueOptionAnswerId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersToIssueOptionAnswers");
                });

            modelBuilder.Entity("Core.Entities.UserToPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int?>("CreatedBy");

                    b.Property<int>("PlanId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersToPlans");
                });

            modelBuilder.Entity("Core.Entities.BooleanAnswer", b =>
                {
                    b.HasOne("Core.Entities.Question", "Question")
                        .WithMany("BooleanAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Resource", "Resource")
                        .WithOne("BooleanAnswer")
                        .HasForeignKey("Core.Entities.BooleanAnswer", "ResourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.UserToPlan", "UserToPlan")
                        .WithMany("BooleanAnswers")
                        .HasForeignKey("UserToPlanId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.File", b =>
                {
                    b.HasOne("Core.Entities.Question", "Question")
                        .WithMany("Files")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.Introduction", b =>
                {
                    b.HasOne("Core.Entities.Plan", "Plan")
                        .WithMany("Introductions")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.File", "Video")
                        .WithOne("Introduction")
                        .HasForeignKey("Core.Entities.Introduction", "VideoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.IssueOptionAnswer", b =>
                {
                    b.HasOne("Core.Entities.TextAnswer", "Issue")
                        .WithMany("IssueOptionAnswers")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Question", "Question")
                        .WithMany("IssueOptionAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.UserToPlan", "UserToPlan")
                        .WithMany("IssueOptionAnswers")
                        .HasForeignKey("UserToPlanId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.IssueOptionAnswerToResource", b =>
                {
                    b.HasOne("Core.Entities.IssueOptionAnswer", "IssueOptionAnswer")
                        .WithMany("IssueOptionAnswersToResources")
                        .HasForeignKey("IssueOptionAnswerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.Resource", "Resource")
                        .WithMany("IssueOptionAnswersToResources")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.Option", b =>
                {
                    b.HasOne("Core.Entities.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.PreparingAnswer", b =>
                {
                    b.HasOne("Core.Entities.IssueOptionAnswer", "IssueOptionAnswer")
                        .WithOne("PreparingAnswer")
                        .HasForeignKey("Core.Entities.PreparingAnswer", "IssueOptionAnswerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Question", "Question")
                        .WithMany("PreparingAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.UserToPlan", "UserToPlan")
                        .WithMany("PreparingAnswers")
                        .HasForeignKey("UserToPlanId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Question", b =>
                {
                    b.HasOne("Core.Entities.StepBlock", "StepBlock")
                        .WithMany("Questions")
                        .HasForeignKey("StepBlockId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.SelectAnswer", b =>
                {
                    b.HasOne("Core.Entities.TextAnswer", "Issue")
                        .WithMany("SelectAnswers")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Option", "Option")
                        .WithMany("SelectAnswers")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Core.Entities.Question", "Question")
                        .WithMany("SelectAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.UserToPlan", "UserToPlan")
                        .WithMany("SelectAnswers")
                        .HasForeignKey("UserToPlanId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.StakeholderRatingAnswer", b =>
                {
                    b.HasOne("Core.Entities.Question", "Question")
                        .WithMany("StakeholderRatingAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.TextAnswer", "Stakeholder")
                        .WithMany("StakeholderRatingAnswers")
                        .HasForeignKey("StakeholderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.UserToPlan", "UserToPlan")
                        .WithMany("StakeholderRatingAnswers")
                        .HasForeignKey("UserToPlanId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.StakeholderRatingAnswerToDictionary", b =>
                {
                    b.HasOne("Core.Entities.Dictionary", "Criterion")
                        .WithMany("StakeholderRatingAnswersToDictionaries")
                        .HasForeignKey("CriterionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.StakeholderRatingAnswer", "StakeholderRatingAnswer")
                        .WithMany("Criteria")
                        .HasForeignKey("StakeholderRatingAnswerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.StepAnswer", b =>
                {
                    b.HasOne("Core.Entities.Question", "Question")
                        .WithMany("StepAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.UserToPlan", "UserToPlan")
                        .WithMany("StepAnswers")
                        .HasForeignKey("UserToPlanId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.StrategicIssueAnswer", b =>
                {
                    b.HasOne("Core.Entities.TextAnswer", "Issue")
                        .WithMany("StrategicIssueAnswers")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Question", "Question")
                        .WithMany("StrategicIssueAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.UserToPlan", "UserToPlan")
                        .WithMany("StrategicIssueAnswers")
                        .HasForeignKey("UserToPlanId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.TextAnswer", b =>
                {
                    b.HasOne("Core.Entities.Question", "Question")
                        .WithMany("TextAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.UserToPlan", "UserToPlan")
                        .WithMany("TextAnswers")
                        .HasForeignKey("UserToPlanId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.HasOne("Core.Entities.Dictionary", "Position")
                        .WithMany("Users")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.UserToIssueOptionAnswer", b =>
                {
                    b.HasOne("Core.Entities.IssueOptionAnswer", "IssueOptionAnswer")
                        .WithMany("UsersToIssueOptionAnswers")
                        .HasForeignKey("IssueOptionAnswerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("UsersToIssueOptionAnswers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Entities.UserToPlan", b =>
                {
                    b.HasOne("Core.Entities.Plan", "Plan")
                        .WithMany("UsersToPlans")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("UsersToPlans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
